# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageMetaDto {
  page: Int!
  take: Int!
  itemCount: Int!
  pageCount: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ProfileDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  bio: String
  avatar: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  role: RoleType!
  email: String
  phone: String!
  profile: ProfileDto
}

enum RoleType {
  USER
  ADMIN
}

type UsersPageDto {
  data: [UserDto!]!
  meta: PageMetaDto!
}

type TokenRo {
  expiresIn: Int!
  accessToken: String!
}

type LoginRo {
  user: UserDto!
  token: TokenRo!
}

type CountryDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  nameAR: String!
  nameEN: String!
  cities: [CityDto!]
}

type CityDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameAR: String!
  nameEN: String!
  country: CountryDto
}

type CountriesPageDto {
  data: [CountryDto!]!
  meta: PageMetaDto!
}

type CitiesPageDto {
  data: [CityDto!]!
  meta: PageMetaDto!
}

type ImageDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  folder: ImageType!
  url: String!
}

enum ImageType {
  PROFILE
  POST
  OFFER
}

type ImagesPageDto {
  data: [ImageDto!]!
  meta: PageMetaDto!
}

type ProfilesPageDto {
  data: [ProfileDto!]!
  meta: PageMetaDto!
}

type Query {
  me: UserDto!
  users(order: Order = ASC, sort: String!, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): UsersPageDto!
  user(id: String!): UserDto!
  profiles(order: Order = ASC, sort: String!, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): ProfilesPageDto!
  profile(id: String!): ProfileDto!
  countries(order: Order = ASC, sort: String!, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): CountriesPageDto!
  country(id: String!): CountryDto!
  cities(order: Order = ASC, sort: String!, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): CitiesPageDto!
  city(id: String!): CityDto!
  images(order: Order = ASC, sort: String!, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): ImagesPageDto!
  image(id: String!): ImageDto!
}

enum Order {
  ASC
  DESC
}

type Mutation {
  login(phone: String!, password: String!): LoginRo!
  register(name: String!, email: String, password: String!, phone: String!, profile: CreateProfileDto): UserDto!
  createCountry(code: String!, nameAR: String!, nameEN: String!): CountryDto!
  updateCountry(code: String, nameAR: String, nameEN: String, id: String!): CountryDto!
  deleteCountry(id: String!): CountryDto!
  createCity(nameAR: String!, nameEN: String!, countryCode: String!): CityDto!
  updateCity(nameAR: String, nameEN: String, countryCode: String, id: String!): CityDto!
  deleteCity(id: String!): CityDto!
  createImage(file: Upload, name: String, folder: ImageType!): ImageDto!
  updateImage(name: String, folder: ImageType, id: String!): ImageDto!
  deleteImage(id: String!): ImageDto!
}

input CreateProfileDto {
  bio: String
  avatar: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
