# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageMetaDto {
  page: Int!
  take: Int!
  itemCount: Int!
  pageCount: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type CityDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameAR: String!
  nameEN: String!
  country: CountryDto
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CountryDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  nameAR: String!
  nameEN: String!
  cities: [CityDto!]
}

type DistrictDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameAR: String!
  nameEN: String!
  city: CityDto!
}

type CategoryDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameAR: String!
  nameEN: String!
  status: CategoryStatus!
  subCategories: [SubCategoryDto!]
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
  DELETED
}

type SubCategoryDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  nameAR: String!
  nameEN: String!
  category: CategoryDto
  status: SubCategoryStatus!
}

enum SubCategoryStatus {
  ACTIVE
  INACTIVE
  DELETED
}

type ImageDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  folder: ImageType!
  url: String!
}

enum ImageType {
  PROFILE
  REQUEST
  OFFER
}

type LocationDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  address1: String
  address2: String
  country: CountryDto
  city: CityDto
  district: DistrictDto
}

type ProfileDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  bio: String
  avatar: String
}

type UserDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  role: RoleType!
  email: String
  phone: String!
  status: UserStatus!
  profile: ProfileDto
  location: LocationDto
}

enum RoleType {
  BUYER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  DELETED
}

type RequestDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  budgetMin: Float
  budgetMax: Float
  budgetCurrency: String
  images: [ImageDto!]
  category: CategoryDto!
  subCategory: SubCategoryDto!
  location: LocationDto
  owner: UserDto!
  status: RequestStatus!
}

enum RequestStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  DELETED
}

type CountriesPageDto {
  data: [CountryDto!]!
  meta: PageMetaDto!
}

type CitiesPageDto {
  data: [CityDto!]!
  meta: PageMetaDto!
}

type DistrictsPageDto {
  data: [DistrictDto!]!
  meta: PageMetaDto!
}

type LocationsPageDto {
  data: [LocationDto!]!
  meta: PageMetaDto!
}

type SMSDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  phone: String!
  body: String!
  status: SMSStatus!
}

enum SMSStatus {
  INITIATED
  SENT
  FAILED
}

type SMSPageDto {
  data: [SMSDto!]!
  meta: PageMetaDto!
}

type SMSSentRo {
  phone: String!
  body: String!
  status: SMSStatus!
}

type OTPDto {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  reason: OTPReason!
  attempt: Float!
  retry: Float!
  phone: String!
  status: OTPStatus!
}

enum OTPReason {
  REGISTER
  RESET_PASSWORD
}

enum OTPStatus {
  SENT
  VERIFIED
  INVALID
  EXPIRED
  TERMINATED
}

type OTPPageDto {
  data: [OTPDto!]!
  meta: PageMetaDto!
}

type OTPSentRo {
  reason: OTPReason!
  attempt: Float!
  retry: Float!
  phone: String!
  status: OTPStatus!
}

type ProfilesPageDto {
  data: [ProfileDto!]!
  meta: PageMetaDto!
}

type ActivateUserRO {
  user: UserDto!
  otp: OTPSentRo!
}

type UsersPageDto {
  data: [UserDto!]!
  meta: PageMetaDto!
}

type ChangePasswordRo {
  phone: String!
  message: String!
  otp: OTPSentRo!
}

type ResetPasswordRo {
  phone: String!
  message: String!
}

type TokenRo {
  expiresIn: Int!
  accessToken: String!
}

type LoginRo {
  user: UserDto!
  token: TokenRo!
}

type CategoriesPageDto {
  data: [CategoryDto!]!
  meta: PageMetaDto!
}

type ImagesPageDto {
  data: [ImageDto!]!
  meta: PageMetaDto!
}

type SubCategoriesPageDto {
  data: [SubCategoryDto!]!
  meta: PageMetaDto!
}

type RequestsPageDto {
  data: [RequestDto!]!
  meta: PageMetaDto!
}

type Query {
  me: UserDto!
  users(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): UsersPageDto!
  user(include: String, id: String!): UserDto!
  profiles(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): ProfilesPageDto!
  profile(id: String!): ProfileDto!
  locations(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): LocationsPageDto!
  location(id: String!): LocationDto!
  cities(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): CitiesPageDto!
  city(id: String!): CityDto!
  countries(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): CountriesPageDto!
  country(id: String!): CountryDto!
  districts(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): DistrictsPageDto!
  district(id: String!): DistrictDto!
  otpList(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): OTPPageDto!
  otp(id: String!): OTPDto!
  smsList(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): SMSPageDto!
  sms(id: String!): SMSDto!
  images(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): ImagesPageDto!
  image(id: String!): ImageDto!
  categories(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): CategoriesPageDto!
  category(id: String!): CategoryDto!
  subCategories(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): SubCategoriesPageDto!
  subCategory(id: String!): SubCategoryDto!
  requests(order: Order = ASC, sort: String, page: Int = 1, take: Int = 10, include: String, filter: String, q: String): RequestsPageDto!
  request(id: String!): RequestDto!
}

enum Order {
  ASC
  DESC
}

type Mutation {
  login(phone: String!, password: String!): LoginRo!
  register(name: String!, email: String, password: String!, phone: String!, profile: CreateProfileDto, location: CreateLocationDto): LoginRo!
  resetPassword(phone: String!): ResetPasswordRo!
  changePassword(phone: String!, otp: String, oldPassword: String, password: String!): ChangePasswordRo!
  createUser(name: String!, email: String, password: String!, phone: String!, status: UserStatus!, role: RoleType, profile: CreateProfileDto, location: CreateLocationDto): UserDto!
  me(name: String, email: String, password: String, phone: String, status: UserStatus, role: RoleType, profile: CreateProfileDto, location: CreateLocationDto): UserDto!
  activate(phone: String!, otp: String!): ActivateUserRO!
  updateUser(id: String!, name: String, email: String, password: String, phone: String, status: UserStatus, role: RoleType, profile: CreateProfileDto, location: CreateLocationDto): UserDto!
  updateLocation(id: String!): LocationDto!
  deleteLocation(id: String!): LocationDto!
  createCity(nameAR: String!, nameEN: String!, countryCode: String!): CityDto!
  updateCity(nameAR: String, nameEN: String, countryCode: String, id: String!): CityDto!
  deleteCity(id: String!): CityDto!
  createCountry(code: String!, nameAR: String!, nameEN: String!): CountryDto!
  updateCountry(code: String, nameAR: String, nameEN: String, id: String!): CountryDto!
  deleteCountry(id: String!): CountryDto!
  createDistrict(nameAR: String!, nameEN: String!, cityID: String!): DistrictDto!
  updateDistrict(nameAR: String, nameEN: String, cityID: String, id: String!): DistrictDto!
  deleteDistrict(id: String!): DistrictDto!
  sendOTP(phone: String!, reason: OTPReason!): OTPSentRo!
  validateOTP(code: String!, phone: String!, reason: OTPReason!): OTPSentRo!
  updateOTP(phone: String, reason: OTPReason, id: String!): OTPDto!
  deleteOTP(id: String!): OTPDto!
  sendSMS(phone: String!, body: String!): SMSSentRo!
  updateSMS(phone: String, body: String, id: String!): SMSDto!
  deleteSMS(id: String!): SMSDto!
  createImage(file: Upload, name: String, folder: ImageType!): ImageDto!
  updateImage(name: String, folder: ImageType, id: String!): ImageDto!
  deleteImage(id: String!): ImageDto!
  createCategory(nameAR: String!, nameEN: String!, status: CategoryStatus): CategoryDto!
  updateCategory(nameAR: String, nameEN: String, status: CategoryStatus, id: String!): CategoryDto!
  deleteCategory(id: String!): CategoryDto!
  createSubCategory(nameAR: String!, nameEN: String!, categoryID: String!, status: SubCategoryStatus): SubCategoryDto!
  updateSubCategory(nameAR: String, nameEN: String, categoryID: String, status: SubCategoryStatus, id: String!): SubCategoryDto!
  deleteSubCategory(id: String!): SubCategoryDto!
  createRequest(title: String!, description: String, budgetMin: Float, budgetMax: Float, budgetCurrency: String, images: [String!], categoryID: String!, subCategoryID: String, location: CreateLocationDto, status: RequestStatus!): RequestDto!
  updateRequest(title: String, description: String, budgetMin: Float, budgetMax: Float, budgetCurrency: String, images: [String!], categoryID: String, subCategoryID: String, location: CreateLocationDto, status: RequestStatus, id: String!): RequestDto!
  deleteRequest(id: String!): RequestDto!
}

input CreateProfileDto {
  bio: String
  avatar: String
}

input CreateLocationDto {
  address1: String
  address2: String
  cityID: String!
  districtID: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
